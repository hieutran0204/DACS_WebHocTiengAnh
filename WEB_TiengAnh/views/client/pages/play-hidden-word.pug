
block head
  link(rel="stylesheet", href="/client/css/hidden-word.css")
  title Tr√≤ ch∆°i x√°o ch·ªØ
block content
  .game-container
    h1.title ƒêo√°n T·ª´ Qua H√¨nh ·∫®n

    .hint-container
      p#hintDisplay.glow-text G·ª£i √Ω: #{question.hints[0]}
    
    .image-section
      .image-container
        img.main-image(src=`/admin/img/uploads_reading_TOEIC/${question.image}`)
        .image-mask
          .mask-piece(data-index="0")
          .mask-piece(data-index="1")
          .mask-piece(data-index="2")
          .mask-piece(data-index="3")

    form#guessForm.game-form
      .input-group
        input(type="text", name="guess", placeholder="Nh·∫≠p t·ª´ c·ªßa b·∫°n...", autocomplete="off")
        button.submit-btn(type="submit") ƒêo√°n
      input(type="hidden", name="revealedPieces", value="0")
      input(type="hidden", name="currentWord", value=question.word)

    #resultModal.modal
      .modal-content
        h2.modal-title K·∫øt Qu·∫£
        p#resultText
        button#nextWordBtn.btn-next Ti·∫øp T·ª•c
        button#playAgainBtn.btn-again Ch∆°i L·∫°i

  script.
    document.addEventListener('DOMContentLoaded', function() {
      const currentWordData = {
        id: `#{question._id}`,
        word: `#{question.word}`.toLowerCase(),
        image: `#{question.image}`,
        hints: JSON.parse(`!{JSON.stringify(question.hints)}`)
      };

      const maskPieces = Array.from(document.querySelectorAll('.mask-piece'));
      const guessForm = document.getElementById('guessForm');
      const resultModal = document.getElementById('resultModal');
      const resultText = document.getElementById('resultText');
      const nextWordBtn = document.getElementById('nextWordBtn');
      const playAgainBtn = document.getElementById('playAgainBtn');
      const hintDisplay = document.getElementById('hintDisplay');
      
      let revealedPieces = 0;
      let gameEnded = false;

      // Initialize game
      initGame();

      // Form submission handler
      guessForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (gameEnded) return;
        
        const guess = this.elements.guess.value.trim().toLowerCase();
        
        if (!guess) {
          alert('Vui l√≤ng nh·∫≠p t·ª´ ƒëo√°n c·ªßa b·∫°n!');
          return;
        }
        
        if (guess === currentWordData.word) {
          // Correct guess
          revealAllPieces();
          showResult(true, guess);
          disableForm();
        } else {
          // Wrong guess - reveal next piece
          revealedPieces++;
          this.elements.revealedPieces.value = revealedPieces;
          
          if (revealedPieces <= 4) {
            revealPiece(revealedPieces - 1);
            updateHint(revealedPieces);
            
            if (revealedPieces >= 4) {
              showResult(false, guess);
              disableForm();
            } else {
              animateWrongGuess();
            }
          }
          
          this.elements.guess.value = '';
          this.elements.guess.focus();
        }
      });

      // Next word button - load a random word
      nextWordBtn.addEventListener('click', function() {
        this.disabled = true;
        this.textContent = 'ƒêang t·∫£i...';
        fetchRandomWord();
      });

      // Play again button - reset current word
      playAgainBtn.addEventListener('click', function() {
        resetGame();
        resultModal.style.display = 'none';
      });

      function initGame() {
        revealedPieces = 0;
        gameEnded = false;
        guessForm.elements.revealedPieces.value = '0';
        guessForm.elements.guess.value = '';
        guessForm.elements.guess.disabled = false;
        guessForm.querySelector('button').disabled = false;
        
        maskPieces.forEach(piece => {
          piece.style.backgroundColor = '#000';
        });
        
        updateHint(0);
      }

      function revealPiece(index) {
        if (index >= 0 && index < maskPieces.length) {
          maskPieces[index].style.backgroundColor = 'transparent';
          maskPieces[index].style.animation = 'fadeIn 0.5s ease-out';
        }
      }

      function revealAllPieces() {
        maskPieces.forEach(piece => {
          piece.style.backgroundColor = 'transparent';
          piece.style.animation = 'fadeIn 0.5s ease-out';
        });
      }

      function updateHint(revealedCount) {
        let hintText;
        if (revealedCount === 0) {
          hintText = currentWordData.hints[0];
        } else if (revealedCount <= currentWordData.hints.length) {
          hintText = currentWordData.hints[revealedCount];
        } else {
          hintText = `ƒê√°p √°n l√†: ${currentWordData.word}`;
        }
        
        hintDisplay.textContent = `G·ª£i √Ω: ${hintText}`;
        hintDisplay.style.animation = 'none';
        void hintDisplay.offsetWidth;
        hintDisplay.style.animation = 'fadeIn 0.3s ease-out';
      }

      function showResult(isCorrect, userGuess) {
        gameEnded = true;
        
        if (isCorrect) {
          resultText.innerHTML = `
            <span class="correct">Ch√≠nh x√°c! üéâ</span><br>
            B·∫°n ƒë√£ ƒëo√°n ƒë√∫ng t·ª´: <strong>${currentWordData.word}</strong>
          `;
        } else {
          resultText.innerHTML = `
            <span class="wrong">Ch∆∞a ch√≠nh x√°c!</span><br>
            ${revealedPieces >= 4 ? `ƒê√°p √°n l√†: <strong>${currentWordData.word}</strong>` : `B·∫°n ƒë√£ m·ªü ${revealedPieces}/4 √¥`}<br>
            ${userGuess ? `B·∫°n ƒë√£ ƒëo√°n: <strong>${userGuess}</strong>` : ''}
          `;
        }
        
        resultModal.style.display = 'flex';
      }

      function disableForm() {
        guessForm.elements.guess.disabled = true;
        guessForm.querySelector('button').disabled = true;
      }

      function resetGame() {
        initGame();
      }

      function animateWrongGuess() {
        const input = guessForm.elements.guess;
        input.style.animation = 'none';
        void input.offsetWidth;
        input.style.animation = 'shake 0.5s';
        
        setTimeout(() => {
          input.style.animation = '';
        }, 500);
      }
      async function fetchRandomWord() {
        try {
            const response = await fetch('/hidden-word/random');
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.word) {
                    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang v·ªõi t·ª´ m·ªõi
                    window.location.href = `/hidden-word?id=${data.word._id}`;
                } else {
                    throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ server');
                }
            } else {
                throw new Error('Failed to fetch random word');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Kh√¥ng th·ªÉ t·∫£i t·ª´ m·ªõi. Vui l√≤ng th·ª≠ l·∫°i!');
            nextWordBtn.disabled = false;
            nextWordBtn.textContent = 'Ti·∫øp T·ª•c';
        }
    }
      //- async function fetchRandomWord() {
      //-   try {
      //-     const response = await fetch('/hidden-word/random');
      //-     if (response.ok) {
      //-       window.location.reload(); // Reload with new random word
      //-     } else {
      //-       throw new Error('Failed to fetch random word');
      //-     }
      //-   } catch (error) {
      //-     console.error('Error:', error);
      //-     alert('Kh√¥ng th·ªÉ t·∫£i t·ª´ m·ªõi. Vui l√≤ng th·ª≠ l·∫°i!');
      //-     nextWordBtn.disabled = false;
      //-     nextWordBtn.textContent = 'Ti·∫øp T·ª•c';
      //-   }
      //- }

      // Add shake animation
      const style = document.createElement('style');
      style.textContent = `
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
          20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
      `;
      document.head.appendChild(style);
    });