extends ../../layouts/default

block content
  .container.mt-5
    h1 Tạo câu hỏi Listening TOEIC

    #error-container
      if error
        .alert.alert-danger= error

    form(method='POST', id='listeningForm', enctype='multipart/form-data', novalidate)
      .mb-3
        label.form-label(for='part') Chọn Part *
        select.form-control(name='part', id='partSelect', required)
          option(value='') -- Chọn Part --
          option(value='1') Part 1: Mô tả hình ảnh
          option(value='2') Part 2: Hỏi - Đáp
          option(value='3') Part 3: Hội thoại
          option(value='4') Part 4: Bài nói

      .mb-3
        label.form-label(for='audio') File Audio (MP3/WAV) *
        input.form-control(type='file', name='audio', id='audioInput', accept='audio/mp3,audio/mpeg,audio/wav', required)
        small.text-muted (Bắt buộc, tối đa 50MB)

      .mb-3
        label.form-label(for='questionNumber') Số câu hỏi *
        input.form-control(type='number', name='questionNumber', min='1', max='100', required)

      // Part 1: Picture Description
      #part1-fields(style='display: none;')
        .mb-3
          label.form-label(for='image') Hình ảnh minh họa *
          input.form-control(type='file', name='image', accept='image/jpeg,image/png,image/gif,image/webp', required)
          small.text-muted (Bắt buộc, tối đa 10MB)
        .mb-3
          label.form-label(for='paragraph') Câu hỏi mô tả hình ảnh *
          textarea.form-control(name='paragraph', rows='2', required)
        .mb-3
          label.form-label Các lựa chọn *
          input.form-control(type='text', name='optionA', placeholder='Đáp án A', required, data-required="true")
          input.form-control.mt-2(type='text', name='optionB', placeholder='Đáp án B', required, data-required="true")
          input.form-control.mt-2(type='text', name='optionC', placeholder='Đáp án C', required, data-required="true")
          input.form-control.mt-2(type='text', name='optionD', placeholder='Đáp án D', required, data-required="true")
        .mb-3
          label.form-label(for='correctAnswer') Đáp án đúng *
          select.form-control(name='correctAnswer', required)
            option(value='') -- Chọn đáp án --
            option(value='A') A
            option(value='B') B
            option(value='C') C
            option(value='D') D
        .mb-3
          label.form-label(for='explanation') Giải thích (Không bắt buộc)
          textarea.form-control(name='explanation', rows='3')

      // Part 2: Question-Response
      #part2-fields(style='display: none;')
        .mb-3
          label.form-label(for='questionText') Câu hỏi *
          textarea.form-control(name='questionText', rows='2', required)
        .mb-3
          label.form-label Các lựa chọn *
          input.form-control(type='text', name='optionA', placeholder='Đáp án A', required, data-required="true")
          input.form-control.mt-2(type='text', name='optionB', placeholder='Đáp án B', required, data-required="true")
          input.form-control.mt-2(type='text', name='optionC', placeholder='Đáp án C', required, data-required="true")
        .mb-3
          label.form-label(for='correctAnswer') Đáp án đúng *
          select.form-control(name='correctAnswer', id='part2CorrectAnswer', required)
            option(value='') -- Chọn đáp án --
            option(value='A') A
            option(value='B') B
            option(value='C') C
        .mb-3
          label.form-label(for='explanation') Giải thích (Không bắt buộc)
          textarea.form-control(name='explanation', rows='3')

      // Part 3: Conversations
      #part3-fields(style='display: none;')
        .mb-3
          label.form-label(for='diagram') Biểu đồ minh họa (Không bắt buộc)
          input.form-control(type='file', name='diagram', accept='image/jpeg,image/png,image/gif,image/webp')
          small.text-muted (Tối đa 10MB)
        .mb-3
          label.form-label(for='transcript') Transcript (Không bắt buộc)
          textarea.form-control(name='transcript', rows='3')
        .mb-3
          label.form-label Danh sách câu hỏi (3 câu) *
          each i in [1, 2, 3]
            .card.mb-2
              .card-body
                h6 Câu hỏi #{i}
                .mb-2
                  label.form-label(for=`question${i}Text`) Nội dung câu hỏi *
                  textarea.form-control(name=`question${i}Text`, id=`question${i}Text`, rows='2', required)
                .mb-2
                  label.form-label Các lựa chọn *
                  input.form-control(type='text', name=`question${i}OptionA`, placeholder='Đáp án A', required)
                  input.form-control.mt-1(type='text', name=`question${i}OptionB`, placeholder='Đáp án B', required)
                  input.form-control.mt-1(type='text', name=`question${i}OptionC`, placeholder='Đáp án C', required)
                  input.form-control.mt-1(type='text', name=`question${i}OptionD`, placeholder='Đáp án D', required)
                .mb-2
                  label.form-label(for=`question${i}CorrectAnswer`) Đáp án đúng *
                  select.form-control(name=`question${i}CorrectAnswer`, required)
                    option(value='') -- Chọn đáp án --
                    option(value='A') A
                    option(value='B') B
                    option(value='C') C
                    option(value='D') D
                .mb-2
                  label.form-label(for=`question${i}Explanation`) Giải thích (Không bắt buộc)
                  textarea.form-control(name=`question${i}Explanation`, rows='2')

      // Part 4: Talks
      #part4-fields(style='display: none;')
        .mb-3
          label.form-label(for='diagram') Biểu đồ minh họa (Không bắt buộc)
          input.form-control(type='file', name='diagram', accept='image/jpeg,image/png,image/gif,image/webp')
          small.text-muted (Tối đa 10MB)
        .mb-3
          label.form-label(for='transcript') Transcript (Không bắt buộc)
          textarea.form-control(name='transcript', rows='3')
        .mb-3
          label.form-label Danh sách câu hỏi (3 câu) *
          each i in [1, 2, 3]
            .card.mb-2
              .card-body
                h6 Câu hỏi #{i}
                .mb-2
                  label.form-label(for=`question${i}Text`) Nội dung câu hỏi *
                  textarea.form-control(name=`question${i}Text`, id=`question${i}Text`, rows='2', required)
                .mb-2
                  label.form-label Các lựa chọn *
                  input.form-control(type='text', name=`question${i}OptionA`, placeholder='Đáp án A', required, data-required="true")
                  input.form-control.mt-1(type='text', name=`question${i}OptionB`, placeholder='Đáp án B', required, data-required="true")
                  input.form-control.mt-1(type='text', name=`question${i}OptionC`, placeholder='Đáp án C', required, data-required="true")
                  input.form-control.mt-1(type='text', name=`question${i}OptionD`, placeholder='Đáp án D', required, data-required="true")
                .mb-2
                  label.form-label(for=`question${i}CorrectAnswer`) Đáp án đúng *
                  select.form-control(name=`question${i}CorrectAnswer`, required)
                    option(value='') -- Chọn đáp án --
                    option(value='A') A
                    option(value='B') B
                    option(value='C') C
                    option(value='D') D
                .mb-2
                  label.form-label(for=`question${i}Explanation`) Giải thích (Không bắt buộc)
                  textarea.form-control(name=`question${i}Explanation`, rows='2')

      button.btn.btn-primary(type='submit') Tạo câu hỏi

  script.
    document.addEventListener('DOMContentLoaded', function () {
      const partSelect = document.getElementById('partSelect');
      const form = document.getElementById('listeningForm');
      const errorContainer = document.getElementById('error-container');

      if (!form) {
        console.error('Không tìm thấy form với ID "listeningForm"');
        errorContainer.innerHTML = '<div class="alert alert-danger">Lỗi: Không tìm thấy form. Vui lòng tải lại trang.</div>';
        return;
      }

      const MAX_FILE_SIZE = {
        audio: 50 * 1024 * 1024, // 50MB
        image: 10 * 1024 * 1024, // 10MB
        diagram: 10 * 1024 * 1024 // 10MB
      };

      function showError(message) {
        errorContainer.innerHTML = `<div class="alert alert-danger">${message}</div>`;
        window.scrollTo(0, 0);
      }

      function togglePartFields() {
        const part = partSelect.value;
        const allFields = document.querySelectorAll('[id^="part"][id$="-fields"]');

        allFields.forEach(field => {
          field.style.display = 'none';
          field.querySelectorAll('input, textarea, select').forEach(input => {
            if (!input.disabled) {
              console.log(`Vô hiệu hóa input: ${input.name}, giá trị: ${input.value}`);
              input.disabled = true;
            }
            if (input.type !== 'file') input.value = '';
            else input.value = null;
            input.classList.remove('is-invalid');
            input.removeAttribute('required');
          });
        });

        if (part) {
          const activeField = document.getElementById(`part${part}-fields`);
          if (activeField) {
            activeField.style.display = 'block';
            activeField.querySelectorAll('input, textarea, select').forEach(input => {
              if (input.disabled) {
                console.log(`Kích hoạt input: ${input.name}`);
                input.disabled = false;
              }
              if (input.dataset.required === 'true' || (input.name !== 'diagram' && input.name !== 'explanation' && input.name !== 'transcript' && !input.name.includes('Explanation'))) {
                input.setAttribute('required', 'true');
              }
            });
          }
        }
      }

      function validateForm(part) {
        errorContainer.innerHTML = '';
        document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));

        const audioInput = form.querySelector('input[name="audio"]');
        if (!audioInput.files || audioInput.files.length === 0) {
          audioInput.classList.add('is-invalid');
          throw new Error('Vui lòng chọn file audio');
        }
        if (audioInput.files[0].size > MAX_FILE_SIZE.audio) {
          audioInput.classList.add('is-invalid');
          throw new Error('File audio vượt quá 50MB');
        }
        if (!['audio/mpeg', 'audio/mp3', 'audio/wav'].includes(audioInput.files[0].type)) {
          audioInput.classList.add('is-invalid');
          throw new Error('File audio phải là MP3 hoặc WAV');
        }

        const questionNumber = form.querySelector('input[name="questionNumber"]');
        if (!questionNumber.value || questionNumber.value < 1 || questionNumber.value > 100) {
          questionNumber.classList.add('is-invalid');
          throw new Error('Số câu hỏi phải từ 1 đến 100');
        }

        if (part === '1') {
          const imageInput = form.querySelector('input[name="image"]');
          if (!imageInput.files || imageInput.files.length === 0) {
            imageInput.classList.add('is-invalid');
            throw new Error('Vui lòng chọn file hình ảnh');
          }
          if (imageInput.files[0].size > MAX_FILE_SIZE.image) {
            imageInput.classList.add('is-invalid');
            throw new Error('File hình ảnh vượt quá 10MB');
          }
          if (!['image/jpeg', 'image/png', 'image/gif', 'image/webp'].includes(imageInput.files[0].type)) {
            imageInput.classList.add('is-invalid');
            throw new Error('File hình ảnh phải là JPEG, PNG, GIF hoặc WEBP');
          }

          const paragraph = form.querySelector('textarea[name="paragraph"]');
          if (!paragraph.value.trim()) {
            paragraph.classList.add('is-invalid');
            throw new Error('Câu hỏi mô tả hình ảnh không được để trống');
          }

          ['A', 'B', 'C', 'D'].forEach(opt => {
            const input = form.querySelector(`#part1-fields input[name="option${opt}"]`);
            console.log(`Part 1 - Kiểm tra option${opt}:`, input ? input.value.trim() : 'Không tìm thấy input');
            console.log(`Part 1 - Input disabled: ${input ? input.disabled : 'N/A'}`);
            if (!input || !input.value || !input.value.trim()) {
              input.classList.add('is-invalid');
              throw new Error(`Đáp án ${opt} không được để trống`);
            }
          });

          const correctAnswer = form.querySelector('#part1-fields select[name="correctAnswer"]');
          if (!correctAnswer.value || !['A', 'B', 'C', 'D'].includes(correctAnswer.value)) {
            correctAnswer.classList.add('is-invalid');
            throw new Error('Đáp án đúng phải là A, B, C hoặc D');
          }
        } else if (part === '2') {
          const questionText = form.querySelector('textarea[name="questionText"]');
          if (!questionText.value.trim()) {
            questionText.classList.add('is-invalid');
            throw new Error('Câu hỏi không được để trống');
          }

          ['A', 'B', 'C'].forEach(opt => {
            const input = form.querySelector(`#part2-fields input[name="option${opt}"]`);
            console.log(`Part 2 - Kiểm tra option${opt}:`, input ? input.value.trim() : 'Không tìm thấy input');
            console.log(`Part 2 - Input disabled: ${input ? input.disabled : 'N/A'}`);
            if (!input || !input.value || !input.value.trim()) {
              input.classList.add('is-invalid');
              throw new Error(`Đáp án ${opt} không được để trống`);
            }
          });

          const correctAnswer = form.querySelector('#part2CorrectAnswer');
          console.log(`Part 2 - Kiểm tra correctAnswer:`, correctAnswer ? correctAnswer.value : 'Không tìm thấy select');
          if (!correctAnswer || !correctAnswer.value || !['A', 'B', 'C'].includes(correctAnswer.value)) {
            if (correctAnswer) correctAnswer.classList.add('is-invalid');
            throw new Error('Đáp án đúng phải là A, B hoặc C');
          }
        } else if (part === '3' || part === '4') {
          const diagramInput = form.querySelector('input[name="diagram"]');
          if (diagramInput && diagramInput.files && diagramInput.files.length > 0) {
            if (diagramInput.files[0].size > MAX_FILE_SIZE.diagram) {
              diagramInput.classList.add('is-invalid');
              throw new Error('File biểu đồ vượt quá 10MB');
            }
            if (!['image/jpeg', 'image/png', 'image/gif', 'image/webp'].includes(diagramInput.files[0].type)) {
              diagramInput.classList.add('is-invalid');
              throw new Error('File biểu đồ phải là JPEG, PNG, GIF hoặc WEBP');
            }
          }

          for (let i = 1; i <= 3; i++) {
            const text = form.querySelector(`#part${part}-fields textarea[name="question${i}Text"]`);
            console.log(`Part ${part} - Kiểm tra question${i}Text:`, text ? text.value.trim() : 'Không tìm thấy textarea');
            console.log(`Part ${part} - Textarea disabled: ${text ? text.disabled : 'N/A'}`);
            if (!text || !text.value || !text.value.trim()) {
              if (text) text.classList.add('is-invalid');
              throw new Error(`Câu hỏi ${i}: Nội dung không được để trống`);
            }

            ['A', 'B', 'C', 'D'].forEach(opt => {
              const input = form.querySelector(`#part${part}-fields input[name="question${i}Option${opt}"]`);
              console.log(`Part ${part} - Kiểm tra question${i}Option${opt}:`, input ? input.value.trim() : 'Không tìm thấy input');
              console.log(`Part ${part} - Input disabled: ${input ? input.disabled : 'N/A'}`);
              if (!input || !input.value || !input.value.trim()) {
                input.classList.add('is-invalid');
                throw new Error(`Câu hỏi ${i}: Đáp án ${opt} không được để trống`);
              }
            });

            const correctAnswer = form.querySelector(`#part${part}-fields select[name="question${i}CorrectAnswer"]`);
            if (!correctAnswer.value || !['A', 'B', 'C', 'D'].includes(correctAnswer.value)) {
              correctAnswer.classList.add('is-invalid');
              throw new Error(`Câu hỏi ${i}: Đáp án đúng phải là A, B, C hoặc D`);
            }
          }
        }
      }

      partSelect.addEventListener('change', togglePartFields);

      form.addEventListener('submit', async function (e) {
        e.preventDefault();
        const part = partSelect.value;

        try {
          validateForm(part);

          const formData = new FormData(form);
          const formDataObj = {};
          formData.forEach((value, key) => {
            formDataObj[key] = value;
          });
          console.log('Dữ liệu gửi lên:', formDataObj);

          let url = '';
          if (part === '1') url = '/admin/listeningTOEIC/create';
          else if (part === '2') url = '/admin/listeningTOEIC/create';
          else if (part === '3') url = '/admin/listeningTOEIC/create';
          else if (part === '4') url = '/admin/listeningTOEIC/create';
          else throw new Error('Phần không hợp lệ');

          const response = await fetch(url, {
            method: 'POST',
            body: formData
          });

          const result = await response.json();
          if (!response.ok) {
            throw new Error(result.error || 'Lỗi không xác định');
          }

          alert(result.message);
          form.reset();
          togglePartFields();
          window.scrollTo(0, 0);
        } catch (err) {
          console.error('Lỗi:', err.message);
          showError(err.message);
        }
      });

      togglePartFields();
    });