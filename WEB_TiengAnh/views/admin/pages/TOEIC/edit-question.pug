extends ../../layouts/default

block content
  .container.mt-4
    // Hi·ªÉn th·ªã flash message
    if success && success.length
      .alert.alert-success.alert-dismissible.fade.show(role='alert')
        i.fas.fa-check-circle.me-2
        = success[0]
        button.btn-close(type='button', data-bs-dismiss='alert', aria-label='Close')

    if error && error.length
      .alert.alert-danger.alert-dismissible.fade.show(role='alert')
        i.fas.fa-exclamation-triangle.me-2
        = error[0]
        button.btn-close(type='button', data-bs-dismiss='alert', aria-label='Close')

    .d-flex.justify-content-between.align-items-center.mb-4
      h1 üìù Ch·ªânh s·ª≠a c√¢u h·ªèi TOEIC Part #{question.part}
      a.btn.btn-secondary(href=`/admin/questions/by-part/${question.part}`)
        i.fas.fa-arrow-left.me-2
        | Quay l·∫°i danh s√°ch Part #{question.part}

    .card
      .card-body
        form(method="POST", action=`/admin/questions/update/${question._id}`, enctype="multipart/form-data", id="questionForm")
          .row.mb-3
            .col-md-4
              label.form-label(for="MaCC") M√£ Ch·ª©ng Ch·ªâ
              select.form-select(name="MaCC", required)
                option(value="TOEIC", selected=question.MaCC === "TOEIC") TOEIC
                option(value="IELTS", selected=question.MaCC === "IELTS") IELTS
                option(value="TOEFL", selected=question.MaCC === "TOEFL") TOEFL

            .col-md-4
              label.form-label(for="TopicN") M√£ ƒê·ªÅ
              input.form-control(type="number", name="TopicN", value=question.TopicN, required, min="1")

            .col-md-4
              label.form-label(for="part") Ph·∫ßn Thi (Part)
              input.form-control(type="text", value=`Part ${question.part}`, readonly)
              input(type="hidden", name="part", value=question.part)

          .row.mb-3
            .col-md-2
              label.form-label(for="questionN") C√¢u H·ªèi S·ªë
              input.form-control(type="number", name="questionN", value=question.questionN, required, min="1", max="100")

          // Part 5
          if question.part == 5
            .mb-3
              label.form-label(for="question") C√¢u h·ªèi
              textarea.form-control(name="question", rows="2", required)= question.question || ''

            .mb-3
              label.form-label ƒê√°p √Ån
              .row
                each val, index in ['A', 'B', 'C', 'D']
                  .col-md-6.mb-2
                    .input-group
                      span.input-group-text #{val}
                      input.form-control(type="text", name="options[]", value=question.options && question.options[index] || '', required)

            .mb-3
              label.form-label(for="correctAnswer") ƒê√°p √°n ƒë√∫ng
              select.form-select(name="correctAnswer", required)
                option(value="") -- Ch·ªçn --
                each val in ['A', 'B', 'C', 'D']
                  option(value=val, selected=question.correctAnswer === val)= val

          // Part 6
          if question.part == 6
            .mb-3
              label.form-label(for="passage") ƒêo·∫°n vƒÉn (Passage)
              textarea.form-control(name="passage", rows="5", required)= question.passage || ''

            .mb-3
              label.fw-bold C√¢u h·ªèi ƒëi·ªÅn t·ª´ (Blanks)
              .blanks-container
                each blank, index in question.blanks && question.blanks.length ? question.blanks : [{ blank: 1, options: ['', '', '', ''], correctAnswer: '' }]
                  .card.mb-3.blank-card
                    .card-header Blank #{blank.blank || index + 1}
                    .card-body
                      input(type="hidden", name=`blanks[${index}][blank]`, value=blank.blank || index + 1)
                      each val, optIndex in ['A', 'B', 'C', 'D']
                        .input-group.mb-2
                          span.input-group-text #{val}
                          input.form-control(type="text", name=`blanks[${index}][options][]`, value=blank.options && blank.options[optIndex] || '', required)
                      label.form-label Ch·ªçn ƒë√°p √°n ƒë√∫ng:
                      select.form-select(name=`blanks[${index}][correctAnswer]`, required)
                        option(value="") -- Ch·ªçn --
                        each val in ['A', 'B', 'C', 'D']
                          option(value=val, selected=blank.correctAnswer === val)= val
              button.btn.btn-outline-primary.mb-3.add-blank(type="button") Th√™m Blank
              button.btn.btn-outline-danger.mb-3.remove-blank(type="button", class=question.blanks && question.blanks.length > 1 ? '' : 'd-none') X√≥a Blank

          // Part 7
          if question.part == 7
            .mb-3
              label.form-label(for="passage") ƒêo·∫°n vƒÉn (Passage)
              textarea.form-control(name="passage", rows="5", required)= question.passage || ''

            .mb-3
              label.fw-bold C√¢u h·ªèi ƒë·ªçc hi·ªÉu
              .questions-container
                each q, index in question.questions && question.questions.length ? question.questions : [{ question: '', options: ['', '', '', ''], correctAnswer: '' }]
                  .card.mb-3.question-card
                    .card-header C√¢u h·ªèi #{index + 1}
                    .card-body
                      .mb-3
                        label.form-label N·ªôi dung c√¢u h·ªèi
                        input.form-control(type="text", name=`questions[${index}][question]`, value=q.question || '', required)
                      each val, optIndex in ['A', 'B', 'C', 'D']
                        .input-group.mb-2
                          span.input-group-text #{val}
                          input.form-control(type="text", name=`questions[${index}][options][]`, value=q.options && q.options[optIndex] || '', required)
                      label.form-label ƒê√°p √°n ƒë√∫ng
                      select.form-select(name=`questions[${index}][correctAnswer]`, required)
                        option(value="") -- Ch·ªçn --
                        each val in ['A', 'B', 'C', 'D']
                          option(value=val, selected=q.correctAnswer === val)= val
              button.btn.btn-outline-primary.mb-3.add-question(type="button") Th√™m C√¢u h·ªèi
              button.btn.btn-outline-danger.mb-3.remove-question(type="button", class=question.questions && question.questions.length > 1 ? '' : 'd-none') X√≥a C√¢u h·ªèi

          .row.mb-3
            .col-md-6
              label.form-label(for="image") H√¨nh ·∫£nh m·ªõi (n·∫øu thay ƒë·ªïi)
              input.form-control(type="file", name="image", accept="image/*")
              if question.Img
                .mt-2
                  label.form-label ·∫¢nh hi·ªán t·∫°i:
                  img(src=question.Img, width="200", class="img-thumbnail mb-2")
                  .form-check
                    input.form-check-input(type="checkbox", name="removeImage", id="removeImage")
                    label.form-check-label(for="removeImage") X√≥a ·∫£nh n√†y

            .col-md-6
              label.form-label(for="difficulty") ƒê·ªô kh√≥
              select.form-select(name="difficulty", required)
                option(value="") -- Ch·ªçn ƒë·ªô kh√≥ --
                option(value="0", selected=question.difficulty === 0) D·ªÖ
                option(value="1", selected=question.difficulty === 1) Trung b√¨nh
                option(value="2", selected=question.difficulty === 2) Kh√≥

          .mb-3
            label.form-label(for="explanation") Gi·∫£i th√≠ch
            textarea.form-control(name="explanation", rows="3")= question.explanation || ''

          .d-flex.justify-content-between.mt-4
            a.btn.btn-outline-secondary(href=`/admin/questions/by-part/${question.part}`) ‚Üê Quay l·∫°i
            button.btn.btn-primary(type="submit")
              i.fas.fa-save.me-2
              | L∆∞u thay ƒë·ªïi

  script.
    // Th√™m blank ƒë·ªông
    document.querySelector('.add-blank').addEventListener('click', function() {
      const container = document.querySelector('.blanks-container');
      const blankCount = container.querySelectorAll('.blank-card').length;
      if (blankCount >= 4) {
        alert('T·ªëi ƒëa 4 blanks!');
        return;
      }
      const blankIndex = blankCount;
      const blankHtml = `
        <div class="card mb-3 blank-card">
          <div class="card-header">Blank ${blankIndex + 1}</div>
          <div class="card-body">
            <input type="hidden" name="blanks[${blankIndex}][blank]" value="${blankIndex + 1}">
            ${['A', 'B', 'C', 'D'].map(val => `
              <div class="input-group mb-2">
                <span class="input-group-text">${val}</span>
                <input class="form-control" type="text" name="blanks[${blankIndex}][options][]" required>
              </div>
            `).join('')}
            <label class="form-label">Ch·ªçn ƒë√°p √°n ƒë√∫ng:</label>
            <select class="form-select" name="blanks[${blankIndex}][correctAnswer]" required>
              <option value="">-- Ch·ªçn --</option>
              <option value="A">A</option>
              <option value="B">B</option>
              <option value="C">C</option>
              <option value="D">D</option>
            </select>
          </div>
        </div>
      `;
      container.insertAdjacentHTML('beforeend', blankHtml);
      document.querySelector('.remove-blank').classList.remove('d-none');
    });

    // X√≥a blank
    document.querySelector('.remove-blank').addEventListener('click', function() {
      const container = document.querySelector('.blanks-container');
      const blanks = container.querySelectorAll('.blank-card');
      if (blanks.length > 1) {
        container.removeChild(blanks[blanks.length - 1]);
        document.querySelector('.remove-blank').classList.toggle('d-none', container.querySelectorAll('.blank-card').length <= 1);
      }
    });

    // Th√™m question ƒë·ªông
    document.querySelector('.add-question').addEventListener('click', function() {
      const container = document.querySelector('.questions-container');
      const questionCount = container.querySelectorAll('.question-card').length;
      if (questionCount >= 4) {
        alert('T·ªëi ƒëa 4 c√¢u h·ªèi!');
        return;
      }
      const qIndex = questionCount;
      const questionHtml = `
        <div class="card mb-3 question-card">
          <div class="card-header">C√¢u h·ªèi ${qIndex + 1}</div>
          <div class="card-body">
            <div class="mb-3">
              <label class="form-label">N·ªôi dung c√¢u h·ªèi</label>
              <input class="form-control" type="text" name="questions[${qIndex}][question]" required>
            </div>
            ${['A', 'B', 'C', 'D'].map(val => `
              <div class="input-group mb-2">
                <span class="input-group-text">${val}</span>
                <input class="form-control" type="text" name="questions[${qIndex}][options][]" required>
              </div>
            `).join('')}
            <label class="form-label">ƒê√°p √°n ƒë√∫ng</label>
            <select class="form-select" name="questions[${qIndex}][correctAnswer]" required>
              <option value="">-- Ch·ªçn --</option>
              <option value="A">A</option>
              <option value="B">B</option>
              <option value="C">C</option>
              <option value="D">D</option>
            </select>
          </div>
        </div>
      `;
      container.insertAdjacentHTML('beforeend', questionHtml);
      document.querySelector('.remove-question').classList.remove('d-none');
    });

    // X√≥a question
    document.querySelector('.remove-question').addEventListener('click', function() {
      const container = document.querySelector('.questions-container');
      const questions = container.querySelectorAll('.question-card');
      if (questions.length > 1) {
        container.removeChild(questions[questions.length - 1]);
        document.querySelector('.remove-question').classList.toggle('d-none', container.querySelectorAll('.question-card').length <= 1);
      }
    });

    // X·ª≠ l√Ω submit form
    document.getElementById('questionForm').addEventListener('submit', function(e) {
      const part = document.querySelector('[name="part"]').value;
      let isValid = true;
      let errorMessage = '';

      if (part === "5") {
        const question = document.querySelector('[name="question"]');
        const options = document.querySelectorAll('[name="options[]"]');
        const correctAnswer = document.querySelector('[name="correctAnswer"]');
        
        if (!question.value.trim()) {
          errorMessage = 'Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi';
          isValid = false;
        } else if (options.length !== 4 || Array.from(options).some(opt => !opt.value.trim())) {
          errorMessage = 'Vui l√≤ng nh·∫≠p ƒë√∫ng 4 ƒë√°p √°n';
          isValid = false;
        } else if (!correctAnswer.value) {
          errorMessage = 'Vui l√≤ng ch·ªçn ƒë√°p √°n ƒë√∫ng';
          isValid = false;
        }
      } else if (part === "6") {
        const passage = document.querySelector('[name="passage"]');
        const blanks = document.querySelectorAll('.blank-card');
        
        if (!passage.value.trim()) {
          errorMessage = 'Vui l√≤ng nh·∫≠p ƒëo·∫°n vƒÉn (passage)';
          isValid = false;
        } else if (blanks.length === 0) {
          errorMessage = 'Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt blank';
          isValid = false;
        } else {
          blanks.forEach((blank, i) => {
            const blankOptions = blank.querySelectorAll('[name$="[options][]"]');
            const blankCorrectAnswer = blank.querySelector('[name$="[correctAnswer]"]');
            
            if (blankOptions.length !== 4 || Array.from(blankOptions).some(opt => !opt.value.trim())) {
              errorMessage = `Vui l√≤ng nh·∫≠p ƒë√∫ng 4 ƒë√°p √°n cho Blank ${i+1}`;
              isValid = false;
            } else if (!blankCorrectAnswer.value) {
              errorMessage = `Vui l√≤ng ch·ªçn ƒë√°p √°n ƒë√∫ng cho Blank ${i+1}`;
              isValid = false;
            }
          });
        }
      } else if (part === "7") {
        const passage = document.querySelector('[name="passage"]');
        const questions = document.querySelectorAll('.question-card');
        
        if (!passage.value.trim()) {
          errorMessage = 'Vui l√≤ng nh·∫≠p ƒëo·∫°n vƒÉn (passage)';
          isValid = false;
        } else if (questions.length === 0) {
          errorMessage = 'Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt c√¢u h·ªèi';
          isValid = false;
        } else {
          questions.forEach((question, i) => {
            const questionText = question.querySelector('[name$="[question]"]');
            const questionOptions = question.querySelectorAll('[name$="[options][]"]');
            const questionCorrectAnswer = question.querySelector('[name$="[correctAnswer]"]');
            
            if (!questionText.value.trim()) {
              errorMessage = `Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi ${i+1}`;
              isValid = false;
            } else if (questionOptions.length !== 4 || Array.from(questionOptions).some(opt => !opt.value.trim())) {
              errorMessage = `Vui l√≤ng nh·∫≠p ƒë√∫ng 4 ƒë√°p √°n cho c√¢u h·ªèi ${i+1}`;
              isValid = false;
            } else if (!questionCorrectAnswer.value) {
              errorMessage = `Vui l√≤ng ch·ªçn ƒë√°p √°n ƒë√∫ng cho c√¢u h·ªèi ${i+1}`;
              isValid = false;
            }
          });
        }
      }

      const difficulty = document.querySelector('[name="difficulty"]').value;
      if (!['0', '1', '2'].includes(difficulty)) {
        errorMessage = 'Vui l√≤ng ch·ªçn ƒë·ªô kh√≥';
        isValid = false;
      }

      if (!isValid) {
        e.preventDefault();
        alert(errorMessage);
      }
    });